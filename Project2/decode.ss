; *********************************************
; *  314 Principles of Programming Languages  *
; *  Spring 2014                              *
; *  Author: Liu Liu                          *
; *          Ulrich Kremer                    *
; *  April 5, 2014                            *
; *********************************************
;; -----------------------------------------------------
;; ENVIRONMENT
;; contains "ctv", "vtc",and "reduce" definitions
(load "include.ss")

;; contains a test document consisting of three paragraphs. 
(load "document.ss")

;; contains a test-dictionary, which has a much smaller dictionary for testing
;; the dictionary is needed for spell checking
(load "test-dictionary.ss")

; (load "dictionary.ss") ;; the real thing with 45,000 words

;; -----------------------------------------------------
;; HELPER FUNCTIONS

;; *** CODE FOR ANY HELPER FUNCTION GOES HERE ***

;; is "a" a member of the list "l"
(define is-member?
  (lambda (a l)
    (cond ((null? l) #f)
          ((equal? a (car l)) #t)
          (else (is-member? a (cdr l))))))

;; boolean: #t for '(w o r d), #f for '((w o r d))
(define is-word?
  (lambda (w)
    (and (list? w) (not (list? (car w))))))

;; apply spell-checker to a paragraph
;; input: paragraph
;; output: list of #t's and #f's for each word in paragraph if spelled correctly
(define spell-checker-paragraph
  (lambda (p)
    (cond ((null? p) '())
          ((spell-checker (car p)) (append (list 1) (spell-checker-paragraph (cdr p))))
          (else (append (list 0) (spell-checker-paragraph (cdr p)))))))

;; reduces a boolean list to just the number of #t in the list
(define num-valid-words
  (lambda (p)
    (reduce + (spell-checker-paragraph p) 0)))

;; -----------------------------------------------------
;; SPELL CHECKER FUNCTION

;;check a word's spell correctness
;;INPUT:a word(a global variable "dictionary" is included in the file "test-dictionary.ss", and can be used directly here)
;;OUTPUT:true(#t) or false(#f)
(define spell-checker 
  (lambda (w)
    (is-member? w dictionary)))

;; -----------------------------------------------------
;; ENCODING FUNCTIONS

;;generate an Caesar Cipher single word encoders
;;INPUT:a number "n"
;;OUTPUT:a function, whose input=a word, output=encoded word
(define encode-n
  (lambda (n)  ;;"n" is the distance, eg. n=3: a->d,b->e,...z->c
    (lambda (w)  ;;"w" is the word to be encoded
      (map vtc 
           (map (lambda (x) (modulo (+ n x) 26)) ;; (x + n) % 26
                (map ctv 
                     w))))))

;;encode a document
;;INPUT: a document "d" and a "encoder"
;;OUTPUT: an encoded document using a provided encoder
(define encode-d;;this encoder is supposed to be the output of "encode-n"
  (lambda (d encoder)
    (cond ((null? d) '())
          ((is-word? d) (encoder d))
          (else (append (list (encode-d (car d) encoder)) 
                        (encode-d (cdr d) encoder))))))

(define  e+1 (encode-n 1))
(define  e-1 (encode-n -1))
(define encoded (encode-d test-document e+1))
(display "Encoded (+1) : ")
(display encoded)
(newline)
(display "Decoded (-1) : ")
(display (encode-d encoded e-1))
(newline)

;; -----------------------------------------------------
;; DECODE FUNCTION GENERATORS
;; 2 generators should be implemented, and each of them returns a decoder

;;generate a decoder using brute-force-version spell-checker
;;INPUT:an encoded paragraph "p"
;;OUTPUT:a decoder, whose input=a word, output=decoded word

;;; pass in current max correct words
;;; probably need to use let
(define Gen-Decoder-A
  (lambda (p)
   ; (let ((check-dec 0))
    ;  (num-valid-words (encode-d (encode-n check-dec) (list (list p))))
      ))
  
  ;;generate a decoder using frequency analysis
  ;;INPUT:same as above
  ;;OUTPUT:same as above
  (define Gen-Decoder-B
    (lambda (p)
      'SOME_CODE_GOES_HERE ;; *** FUNCTION BODY IS MISSING ***
      ))
  
  ;; -----------------------------------------------------
  ;; CODE-BREAKER FUNCTION
  
  ;;a codebreaker
  ;;INPUT: an encoded document(of course by a Caesar's Cipher), a decoder(generated by functions above)
  ;;OUTPUT: a decoded document
  (define Code-Breaker
    (lambda (d decoder)
      (
       'SOME_CODE_GOES_HERE ;; *** FUNCTION BODY IS MISSING ***
       )))
  
  ;; -----------------------------------------------------
  ;; EXAMPLE APPLICATIONS OF FUNCTIONS
  ;;(spell-checker '(h e l l o))
  ;;(define add5 (encode-n 5))
  ;;(encode-d document add5)
  ;;(define decoderSP1 (Gen-Decoder-A paragraph))
  ;;(define decoderFA1 (Gen-Decoder-B paragraph))
  ;;(Code-Breaker document decoderSP1)
  